# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.0b3 on Tue Jan 30 13:49:27 2018
#

from croco_wrapper import CrocoWrapper
from gridop import *

second2day = 1. / 86400.


class Croco(object):
    '''
    Croco class grouping all the methods relative to the variables
    '''
    def __init__(self):
        '''
        Initialise the Croco object
        '''

        self.parameters = {}
        self.ds = CrocoWrapper().ds

        # Set several parameters
        self.parameters['r_earth'] = 6371315.
        self.parameters['rho0'] = 1027.
        self.parameters['g'] = 9.81

        # Rotate u,v on real lat/lon coordinates
        [urot, vrot] = rotuv(self.ds)
        self.ds['u'] = rho2u(urot, self.ds)
        self.ds['v'] = rho2v(vrot, self.ds)

        # Initialize lists of variables
        self.ListOfVariables = self.list_of_variables()
        self.ListOfDerived = self.list_of_derived()

        self.L = self.ds.dims['x_r']
        self.M = self.ds.dims['y_r']
        self.N = self.ds.dims['s_r']
        self.ntimes = self.ds.dims['t']

    def list_of_variables(self):
        '''
        return names of variables depending on time and having at least 3 dimensions
        '''
        
        ds = self.ds
        keys = []
        # self.variables = {}
        # retrieve variable name
        for key in ds.data_vars.keys():
            if ('t' in ds[key].dims and ds[key].ndim > 2 and key != 'z_r'):
                # self.variables[key] = ds[key]
                keys.append(key)
        return keys

    def list_of_derived(self):
        ''' List of calculated variables implemented '''
        keys = []
        keys.append('pv_ijk')
        keys.append('zeta_k')
        keys.append('dtdz')
        keys.append('log(Ri)')
        return keys


    